# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'template.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QTableWidgetItem
import pandas as pd
# import time
# from datetime import timedelta

datasheet = {}

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(10, 20, 511, 281))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.frame.setFont(font)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
#----------------------------start of frame 1--------------------------------#
        self.hoose_area_label = QtWidgets.QLabel(self.frame)
        self.hoose_area_label.setGeometry(QtCore.QRect(0, 0, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.hoose_area_label.setFont(font)
        self.hoose_area_label.setObjectName("hoose_area_label")
        self.choose_area_combobox = QtWidgets.QComboBox(self.frame)
        self.choose_area_combobox.setGeometry(QtCore.QRect(220, 10, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.choose_area_combobox.setFont(font)
        self.choose_area_combobox.setObjectName("choose_area_combobox")

        self.house_type_label = QtWidgets.QLabel(self.frame)
        self.house_type_label.setGeometry(QtCore.QRect(0, 60, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.house_type_label.setFont(font)
        self.house_type_label.setObjectName("house_type_label")
        self.house_type_combobox = QtWidgets.QComboBox(self.frame)
        self.house_type_combobox.setGeometry(QtCore.QRect(220, 70, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.house_type_combobox.setFont(font)
        self.house_type_combobox.setObjectName("house_type_combobox")

        self.desired_price_label = QtWidgets.QLabel(self.frame)
        self.desired_price_label.setGeometry(QtCore.QRect(0, 120, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.desired_price_label.setFont(font)
        self.desired_price_label.setObjectName("desired_price_label")
        self.buy_price_input = QtWidgets.QSpinBox(self.frame)
        self.buy_price_input.setGeometry(QtCore.QRect(220, 130, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.buy_price_input.setFont(font)
        self.buy_price_input.setMaximum(1000000)
        self.buy_price_input.setObjectName("buy_price_input")

        self.selling_price_label = QtWidgets.QLabel(self.frame)
        self.selling_price_label.setGeometry(QtCore.QRect(0, 180, 211, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.selling_price_label.setFont(font)
        self.selling_price_label.setObjectName("selling_price_label")
        self.sell_price_input = QtWidgets.QSpinBox(self.frame)
        self.sell_price_input.setGeometry(QtCore.QRect(220, 190, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.sell_price_input.setFont(font)
        self.sell_price_input.setMaximum(1000000)
        self.sell_price_input.setObjectName("sell_price_input")

        self.monthly_savings_label = QtWidgets.QLabel(self.frame)
        self.monthly_savings_label.setGeometry(QtCore.QRect(0, 240, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.monthly_savings_label.setFont(font)
        self.monthly_savings_label.setScaledContents(False)
        self.monthly_savings_label.setObjectName("monthly_savings_label")
        self.savings_input = QtWidgets.QSpinBox(self.frame)
        self.savings_input.setGeometry(QtCore.QRect(220, 250, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.savings_input.setFont(font)
        self.savings_input.setMaximum(1000000)
        self.savings_input.setObjectName("savings_input")

        self.filter_button = QtWidgets.QPushButton(self.frame)
        self.filter_button.setGeometry(QtCore.QRect(390, 240, 112, 34))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.filter_button.setFont(font)
        self.filter_button.setObjectName("filter_button")
        self.filter_button.clicked.connect(self.filter)

        self.house_type_label = QtWidgets.QLabel(self.frame)
        self.house_type_label.setGeometry(QtCore.QRect(0, 60, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.house_type_label.setFont(font)
        self.house_type_label.setObjectName("house_type_label")
        self.house_type_combobox = QtWidgets.QComboBox(self.frame)
        self.house_type_combobox.setGeometry(QtCore.QRect(220, 70, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.house_type_combobox.setFont(font)
        self.house_type_combobox.setObjectName("house_type_combobox")

        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(10, 320, 1201, 251))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.tableWidget.setFont(font)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
#------------------------------------START OF FRAME 2-----------------------------------------#
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(580, 20, 531, 281))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")

        self.saving_years_label = QtWidgets.QLabel(self.frame_2)
        self.saving_years_label.setGeometry(QtCore.QRect(0, 0, 211, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.saving_years_label.setFont(font)
        self.saving_years_label.setObjectName("saving_years_label")
        self.total_savings_label = QtWidgets.QLabel(self.frame_2)
        self.total_savings_label.setGeometry(QtCore.QRect(300, 0, 160, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.total_savings_label.setFont(font)
        self.total_savings_label.setObjectName("total_savings_label")
        self.input_saving_years = QtWidgets.QSpinBox(self.frame_2)
        self.input_saving_years.setGeometry(QtCore.QRect(210, 10, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.input_saving_years.setFont(font)
        self.input_saving_years.setObjectName("input_saving_years")

        
        self.loan_rate_label = QtWidgets.QLabel(self.frame_2)
        self.loan_rate_label.setGeometry(QtCore.QRect(0, 60, 121, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.loan_rate_label.setFont(font)
        self.loan_rate_label.setObjectName("loan_rate_label")
        self.input_loan_rates = QtWidgets.QDoubleSpinBox(self.frame_2)
        self.input_loan_rates.setGeometry(QtCore.QRect(170, 70, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.input_loan_rates.setFont(font)
        self.input_loan_rates.setMaximum(10.0)
        self.input_loan_rates.setObjectName("input_loan_rates")

        self.loan_duration_label = QtWidgets.QLabel(self.frame_2)
        self.loan_duration_label.setGeometry(QtCore.QRect(0, 120, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.loan_duration_label.setFont(font)
        self.loan_duration_label.setObjectName("loan_duration_label")
        self.input_loan_duration = QtWidgets.QSpinBox(self.frame_2)
        self.input_loan_duration.setGeometry(QtCore.QRect(170, 130, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.input_loan_duration.setFont(font)
        self.input_loan_duration.setObjectName("input_loan_duration")
        
        
        self.average_price_label = QtWidgets.QLabel(self.frame_2)
        self.average_price_label.setGeometry(QtCore.QRect(0, 180, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.average_price_label.setFont(font)
        self.average_price_label.setObjectName("average_price_label")
        self.display_average_price = QtWidgets.QLabel(self.frame_2)
        self.display_average_price.setGeometry(QtCore.QRect(170, 180, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.display_average_price.setFont(font)
        self.display_average_price.setObjectName("display_average_price")
        
        self.monthly_repayment_label = QtWidgets.QLabel(self.frame_2)
        self.monthly_repayment_label.setGeometry(QtCore.QRect(0, 240, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.monthly_repayment_label.setFont(font)
        self.monthly_repayment_label.setObjectName("monthly_repayment_label")
        self.monthly_repayment_value = QtWidgets.QLabel(self.centralwidget)
        self.monthly_repayment_value.setGeometry(QtCore.QRect(750, 260, 141, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.monthly_repayment_value.setFont(font)
        self.monthly_repayment_value.setObjectName("monthly_repayment_value")

        self.calculate = QtWidgets.QPushButton(self.frame_2)
        self.calculate.setGeometry(QtCore.QRect(410, 240, 112, 34))
        self.calculate.setObjectName("pushButton")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.calculate.setFont(font)
        self.calculate.clicked.connect(self.calulate_value)
#----------------------------------start of menubar---------------------------------#
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1250, 31))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen.triggered.connect(self.open_file)
        self.actionSave_as = QtWidgets.QAction(MainWindow)
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave_as)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
#---------------------------------start of functions------------------------#
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.hoose_area_label.setText(_translate("MainWindow", "Choose your area:"))
        self.desired_price_label.setText(_translate("MainWindow", "Enter desired price:"))
        self.selling_price_label.setText(_translate("MainWindow", "Enter projected selling price:"))
        self.monthly_savings_label.setText(_translate("MainWindow", "Enter monthly savings:"))
        self.filter_button.setText(_translate("MainWindow", "Filter"))
        self.house_type_label.setText(_translate("MainWindow", "Choose house type:"))
        self.average_price_label.setText(_translate("MainWindow", "Average Price:"))
        self.display_average_price.setText(_translate("MainWindow", "Nothing Selected"))
        self.loan_rate_label.setText(_translate("MainWindow", "Loan rate P.A"))
        self.loan_duration_label.setText(_translate("MainWindow", "Loan Duration(Years):"))
        self.monthly_repayment_label.setText(_translate("MainWindow", "Monthly Repayments:"))
        self.calculate.setText(_translate("MainWindow", "Calculate"))
        self.saving_years_label.setText(_translate("MainWindow", "Number of Years of savings:"))
        self.total_savings_label.setText(_translate("MainWindow", "Total Savings:"))
        self.monthly_repayment_value.setText(_translate("MainWindow", "Nothing Selected"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSave_as.setText(_translate("MainWindow", "Save as"))
        self.actionSave_as.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))

        self.house_type_combobox.addItem("")
        self.house_type_combobox.addItem("")
        self.house_type_combobox.addItem("")
        self.house_type_combobox.addItem("")
        self.house_type_combobox.addItem("")
        self.house_type_combobox.setItemText(0, '2 ROOM')
        self.house_type_combobox.setItemText(1, '3 ROOM')
        self.house_type_combobox.setItemText(2, '4 ROOM')
        self.house_type_combobox.setItemText(3, '5 ROOM')
        self.house_type_combobox.setItemText(4, 'EXECUTIVE')

    def open_file(self):
        
        self.clear_all
        path = QFileDialog.getOpenFileName()
        path = path[0]
        if path != '':
            # start_time = time.monotonic()
            chunks = pd.read_csv(path, chunksize = 1000)
            df = pd.concat(chunks)
            headerlist = list(df.columns.values)
            self.tableWidget.setColumnCount(len(headerlist))
            self.tableWidget.setHorizontalHeaderLabels(headerlist)
            self.tableWidget.setRowCount(len(df.index))
            for index, value in df.iterrows():
                town = value['town']
            
                # append_value = value.to_dict()
                table_value = value.to_list()       
                # datasheet.append(append_value)
                if town not in datasheet:
                    datasheet[town] = []
                    datasheet[town].append(table_value)
                else:
                    datasheet[town].append(table_value)
                for value in range(len(headerlist)):
                    self.tableWidget.setItem(index, value, QTableWidgetItem(str(table_value[value])))
            # end_time = time.monotonic() 
            # print(timedelta(seconds=end_time - start_time))  
        else:
            pass
         
       

        self.fill_combobox()

    def clear_all(self):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        # print('Cleared')
        # self.tableWidget.setColumnCount(0)
    
    def fill_combobox(self):
        towns = list(datasheet.keys())
        combobox = self.choose_area_combobox
        for town in range(len(towns)):
            combobox.addItem("")
            combobox.setItemText(town, towns[town])

    def filter(self):
        # start_time = time.monotonic()
        count = 0
        condition = self.choose_area_combobox.currentText()
        condtion_2 = self.house_type_combobox.currentText()
        condition_3 = self.buy_price_input.value()
        
        if condition == '':
            pass
        else:
            self.clear_all()
            filtered_town = datasheet[condition]
            data_length = len(filtered_town)
            if condition_3 == 0:
                for rows in range(data_length):
                    if condtion_2 in filtered_town[rows]:
                        self.tableWidget.setRowCount(count + 1)
                        for items in range(len(filtered_town[rows])):
                            self.tableWidget.setItem(count, items, QTableWidgetItem(str(filtered_town[rows][items])))
                        count += 1
            else:
                for rows in range(data_length):
                    if condtion_2 in filtered_town[rows] and condition_3 > int(filtered_town[rows][-1]):
                        self.tableWidget.setRowCount(count + 1)
                        for items in range(len(filtered_town[rows])):
                            self.tableWidget.setItem(count, items, QTableWidgetItem(str(filtered_town[rows][items])))
                        count += 1
        # end_time = time.monotonic()  
        # print(timedelta(seconds=end_time - start_time))

    def calulate_value(self):
        monthly_savings = self.savings_input.value()
        number_of_saving_years = self.input_saving_years.value()
        selling_hdb = self.sell_price_input.value()
        total_savings = monthly_savings * 12 * number_of_saving_years
        self.total_savings_label.setText(f'Total Savings: {total_savings}')

        price = 0
        if self.tableWidget.rowCount() != 0:
            for row in range(self.tableWidget.rowCount()):
                price += float(self.tableWidget.item(row,10).text())
                average_price = round(price / self.tableWidget.rowCount(), 2)    
                self.display_average_price.setText(f'${average_price}')
        
        
        loan_amount = average_price - float(selling_hdb)
        if self.input_loan_rates.value() == 0 or self.input_loan_duration.value() == 0:
            pass
        else:
            if loan_amount <= 0 or loan_amount-total_savings <= 0:
                self.monthly_repayment_value.setText("No loans required")
            else:
                number_of_repayments = self.input_loan_duration.value() * 12
                interest_rate = self.input_loan_rates.value() / 100 / 12
                nominator = interest_rate * ((1 + interest_rate) ** number_of_repayments)
                denomintor = ((1+ interest_rate)** number_of_repayments) - 1
                monthly_payment = round(loan_amount * (nominator/denomintor),2)
                self.monthly_repayment_value.setText(f'{monthly_payment}')


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
